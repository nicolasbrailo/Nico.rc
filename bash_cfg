# Disable annoying ubuntu global menu
## This takes care of the annoying "menu timeout" in gvim when using KDE
## If using gnome or unity it's probably a good idea to comment this out
export UBUNTU_MENUPROXY=0

# Access to my fastgrep script from everywhere without adding a new $PATH entry
alias fastgrep='~/Nico.rc/fastgrep.sh'
alias gf='~/Nico.rc/fastgrep.sh'

# Create a folder-usage alias based on disk-usage
alias fu='du -h --max-depth=1'
alias folderusage='du -h --max-depth=1'

alias screenlock='qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock'

GPG_TTY=`tty`
export GPG_TTY

# Configure history
shopt -s histappend
export HISTFILESIZE=1000000
export HISTSIZE=1000000
export HISTIGNORE='ls:bg:fg:history;cd'
export PROMPT_COMMAND='history -a'

export EDITOR=vim

# Make C-w stop on slashes and spaces (instead of space only)
stty werase undef
bind '\C-w:unix-filename-rubout'

# Safe PS1
export PS1='\A \h:\w$( _scm_prompt " (%s)") \$ '

# Color PS1
# Pick an annoying default color, to remind myself to change it
if [ -z "$THIS_HOST_COLOR" ]; then export THIS_HOST_COLOR=103; fi
export COLOR_RESET='\[\e[0m\]'
export COLOR_SET='\[\e['$THIS_HOST_COLOR'm\]'
if [ -n "$(LC_ALL=C type -t _scm_prompt)" ] && [ "$(LC_ALL=C type -t _scm_prompt)" = function ]; then
  export PS1='\A '$COLOR_SET'\h'$COLOR_RESET':\w$( _scm_prompt " (%s)") \$ ';
else
  export PS1='\A '$COLOR_SET'\h'$COLOR_RESET':\w\$ ';
fi

function lintandreview() {
  if [ `arc lint --never-apply-patches | tee /dev/tty | wc -l` != 1 ]; then
    echo "Lint warnings detected, no review created";
  else
    jf submit --draft
  fi
}

function macnotify() {
  MSG=$1
  TITLE=$2

  NOT_DESC="display notification \"$MSG\" sound name \"\""
  if [[ $TITLE ]]; then
       NOT_DESC="$NOT_DESC with title \"$TITLE\""
  fi

  osascript -e "$NOT_DESC"
}

function rundiskmon() {
  DISK=$1
  MAX_DISK_USE_PCT=95
  while true; do 
    if [[ $DISK ]]; then
      df -P -H | grep $DISK
      if [[ `df -P -H | grep $DISK | wc -l` -eq 1 ]]; then
        USE_PCT=`df -P -H | grep $DISK | awk '{print $5}' | tr -d '%'`
        if [[ $USE_PCT -gt $MAX_DISK_USE_PCT ]]; then
          echo "DANGER" "Running low on disk space. Usage is $USE_PCT, max usage is $MAX_DISK_USE_PCT"
          macnotify "DANGER" "Running low on disk space"
        fi
      fi
    else
      df -P -H
    fi

    sleep 10
    clear
  done
}

