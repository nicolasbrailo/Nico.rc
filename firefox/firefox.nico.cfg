// IMPORTANT: Start your code on the 2nd line
// Debug tips: https://mike.kaply.com/2016/09/08/debugging-firefox-autoconfig-problems/


// Use this to debug to a file if things break too much
/*
CfgDebug = {
  popup: (msg) => { displayError("Debug", msg); },

  startLog: () => {
    try {
      this.file = Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties).get("ProfD", Components.interfaces.nsIFile);
      this.file.append("debug.txt");
      this.fs = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
      this.fs.init(file, 0x02 | 0x08 | 0x20, 0664, 0); // write, create, truncate
      CfgDebug.log("Start log");
    } catch (e) {
      Components.utils.reportError(e);
      this.file = null;
      this.fs = null;
    }
  },

  stopLog: () => {
    if (!this.fs) return;
    try {
      CfgDebug.log("Closing log");
      this.fs.close();
    } catch (e) {
      Components.utils.reportError(e);
      this.file = null;
      this.fs = null;
    }
  },

  log: (msg) => {
    try {
      this.fs.write(msg + '\n', msg.length + 1);
    } catch (e) {
      Components.utils.reportError(e);
      CfgDebug.stopLog();
    }
  },

  debug: (obj) => {
    if (!obj) return CfgDebug.log(typeof(obj));

    function dump(thing) {
      let str = "";
      for (let m in thing) {
        str += String(m) + " | ";
      }
      return str;
    }

    CfgDebug.log("Debug " + typeof(obj) + ": " + dump(obj));
  },
};

CfgDebug.startLog();
CfgDebug.debug(this);
CfgDebug.debug(Components);
*/


/**********************************************************/
/*        Key remapper                                    */
/**********************************************************/

keyRemapDict = {
  "addBookmarkAsKb": null, // Remove D, I never add bookmarks with a keybinding
  "key_savePage": null, // Free up S

  "key_findAgain": null, // Free up G
  "focusURLBar": "G", // G goes to URL bar

  "goBackKb2": "[", // History: navigate back and fwd
  "goForwardKb2": "]",
};

const { classes: Cc, interfaces: Ci, manager: Cm  } = Components;
let Services = globalThis.Services || ChromeUtils.import("resource://gre/modules/Services.jsm").Services;
function KeyRemapper() { Services.obs.addObserver(this, 'chrome-document-global-created', false); }
KeyRemapper.prototype = {
  observe: function (aSubject) { aSubject.addEventListener('DOMContentLoaded', this, {once: true}); },
  handleEvent: function (aEvent) {
    let document = aEvent.originalTarget;
    let window = document.defaultView;
    let location = window.location;
    if (/^(chrome:(?!\/\/(global\/content\/commonDialog|browser\/content\/webext-panels)\.x?html)|about:(?!blank))/i.test(location.href)) {
      if (window._gBrowser) {
        // Get available keys with CfgDebug.debug(window.document.body.innerHTML)
        for (let keyRemap of Object.entries(keyRemapDict)) {
          var cmd = keyRemap[0];
          var key = keyRemap[1];

          const cmdDef = window.document.getElementById(cmd);
          if (!cmdDef) {
            Components.utils.reportError(`Firefox config Requested to remap non existing command ${cmd}`);
            continue;
          }

          if (key) {
            Components.utils.reportError(`Remap ${cmd} to ${key}`);
            cmdDef.setAttribute("key", key);
          } else {
            Components.utils.reportError(`Removing ${cmd}`);
            cmdDef.removeAttribute("command"); 
            cmdDef.removeAttribute("key"); 
            cmdDef.removeAttribute("modifiers"); 
            cmdDef.removeAttribute("oncommand"); 
            cmdDef.removeAttribute("data-l10n-id"); 
          }
        }
      }
    }
  }
};

if (!Services.appinfo.inSafeMode) new KeyRemapper();


/**********************************************************/
/*        Apply custom prefs                              */
/* Keep this last, otherwise they are not applied?        */
/**********************************************************/

// This key should appear in about:config now
lockPref("nico.customConfig", "Yup!");

// Always open last session when browser starts
lockPref("browser.startup.page", 3);
lockPref("browser.startup.homepage", "chrome://browser/content/blanktab.html");

// Will start page-text-search when typing
lockPref("accessibility.typeaheadfind", true);

// Enable middle click + move mouse to scroll page
lockPref("general.autoScroll", true);

// Opt out telemetry
lockPref("app.shield.optoutstudies.enabled", false);
lockPref("browser.crashReports.unsubmittedCheck.autoSubmit2", false);
lockPref("datareporting.healthreport.uploadEnabled", false);

